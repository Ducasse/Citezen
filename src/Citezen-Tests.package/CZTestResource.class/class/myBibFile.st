test data
myBibFile
	^ '
%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Damien Pollet at 2007-05-06 00:22:22 +0200 


%% Saved with string encoding Unicode (UTF-8) 

@string{acm = {ACM Press}}

@string{aw = {Addison-Wesley}}

@string{els = {Elsevier}}

@string{ieee = {IEEE Press}}

@string{jw = {John Wiley \& Sons}}

@string{lncs = {Lecture Notes on Computer Science}}

@string{omg = {Object Management Group}}

@string{or = {O''Reilly \& Associates}}

@string{ox = {Oxford University Press}}

@string{ph = {Prentice Hall}}

@string{sv = {Springer Verlag}}

@string{ws = {World Scientific}}


@inproceedings{Pollet2007sarSoa,
	Author = {Pollet, Damien and Ducasse, Stéphane and Poyet, Loïc and Alloui, Ilham and Cîmpan, Sorana and Verjus, Hervé},
	Booktitle = {11th European Conference on Software Maintenance and Reengineering (CSMR)},
	Date-Added = {2006-12-12 10:21:01 +0100},
	Date-Modified = {2007-05-06 00:21:33 +0200},
	Keywords = {scg-pub recast},
	Local-Url = {file://localhost/Users/dpollet/Documents/Papers-BibDesk/2007/Pollet2007sarSoa.pdf},
	Month = {mar},
	Note = {To appear.},
	Publisher = {IEEE Computer Society},
	Shorttitle = {sarSoa},
	Title = {Towards A Process-Oriented Software Architecture Reconstruction Taxonomy},
	Url = {http://people.untyped.org/damien.pollet/publications/2007/Pollet2007sarSoa.pdf},
	Year = 2007,
	Abstract = {To maintain and understand large applications, it is crucial to know their architecture. The first problem is that unlike classes and packages, architecture is not explicitly represented in the code. The second problem is that successful applications evolve over time, so their architecture inevitably drifts. Reconstructing the architecture and checking whether it is still valid is therefore an important aid. While there is a plethora of approaches and techniques supporting architecture reconstruction, there is no comprehensive state of the art and it is often difficult to compare the approaches. This article presents a state of the art on software architecture reconstruction approaches.},
	Annote = {internationalconference}}

@inproceedings{Bezivin2003reflectiveMde,
	Address = {San Francisco},
	Author = {Bézivin, Jean and Farcet, Nicolas and Jézéquel, Jean-Marc and Langlois, Benoît and Pollet, Damien},
	Booktitle = {UML~2003 -- The Unified Modeling Language -- Modeling Languages and Applications},
	Date-Modified = {2007-05-06 00:21:43 +0200},
	Editor = {Stevens, Perdita and Whittle, Jon and Booch, Grady},
	Isbn = {3-540-20243-9},
	Local-Url = {file://localhost/Users/dpollet/Documents/Papers-BibDesk/2003/Bezivin2003reflectiveMde.pdf},
	Month = oct,
	Pages = {175-189},
	Publisher = SV,
	Series = LNCS,
	Shorttitle = {reflectiveMde},
	Title = {Reflective Model Driven Engineering},
	Url = {http://people.untyped.org/damien.pollet/publications/2003/Bezivin2003reflectiveMde.pdf},
	Volume = 2863,
	Year = 2003,
	Abstract = {In many large organizations, the model transformations allowing the engineers to more or less automatically go from platform-independent models (PIM) to platform-specific models (PSM) are increasingly seen as vital assets. As tools evolve, it is critical that these transformations are not prisoners of a given CASE tool. Considering in this paper that a CASE tool can be seen as a platform for processing a model transformation, we propose to reflectively apply the MDA to itself. We propose to describe models of transformations that are CASE tool independent (platform-independent transformations or PIT) and from them to derive platform-specific transformations (PST). We show how this approach might help in reaching a consensus in the RFP on MOF QVT, including a solution for the declarative/imperative dilemma. We finally explore the consequences of this approach on the development life-cycle. 
},
	Annote = {internationalconference}}

@inproceedings{Manjarres2002analysisPatterns,
	Author = {Manjarrés, Angeles and Sunyé, Gerson and Pollet, Damien and Pickin, Simon and Jézéquel, Jean-Marc},
	Booktitle = {International Conference on Software Engineering and Knowledge Engineering (SEKE)},
	Date-Modified = {2007-05-06 00:21:49 +0200},
	Editor = ACM,
	Local-Url = {file://localhost/Users/dpollet/Documents/Papers-BibDesk/2002/Manjarres2002analysisPatterns.pdf},
	Month = jul,
	Pages = {237-238},
	Shorttitle = {analysisPatterns},
	Title = {AI Analysis Patterns as UML Meta-model Constructs},
	Url = {http://people.untyped.org/damien.pollet/publications/2002/Manjarres2002analysisPatterns.pdf},
	Year = 2002,
	Abstract = {In this article, we investigate the use of the OO computational paradigm for the formulation of knowledge model patterns as OO analysis patterns. We seek to take advantage of research on design pattern specification, aimed at modelling patterns by means of structural and behavioural meta-level constraints, introducing appropriate modifications into the UML. We illustrate our argument with the formulation of an OO "assessment pattern" in analogy to the well known "assessment task template".},
	Annote = {internationalconference}}

@inproceedings{Manjarres2002,
	Author = {Manjarrés, Angeles and Pickin, Simon and Sunyé, Gerson and Pollet, Damien and Jézéquel, Jean-Marc},
	Booktitle = {SGAI International Conference on Knowledge Based Systems and Applied Artificial Intelligence: Research and Development in Intelligent Systems XIX (ES2002)},
	Date-Modified = {2006-12-12 10:10:40 +0100},
	Month = dec,
	Publisher = SV,
	Series = {BCS Conference Series},
	Title = {OO Analysis Patterns as UML Metalevel Collaborations},
	Year = 2002,
	Annote = {internationalconference}}

@misc{Muller2005mtip,
	Address = {Montego Bay, Jamaica},
	Author = {Muller, Pierre-Alain and Fleurey, Franck and Vojtisek, Didier and Drey, Zoé and Pollet, Damien and Fondement, Frédéric and Studer, Philippe and Jézéquel, Jean-Marc},
	Date-Modified = {2006-12-12 10:10:40 +0100},
	Howpublished = {Model Transformations In Practice Workshop},
	Month = oct,
	Shorttitle = {mtip},
	Title = {On Executable Meta-Languages applied to Model Transformations},
	Year = 2005,
	Annote = {internationalworkshop}}

@misc{Pollet2002wituml,
	Address = {Malaga},
	Author = {Pollet, Damien and Vojtisek, Didier and Jézéquel, Jean-Marc},
	Date-Modified = {2006-12-12 10:10:40 +0100},
	Howpublished = {Workshop on Integration and Transformation of UML models (WITUML~2002)},
	Month = jun,
	Shorttitle = {wituml},
	Title = {OCL as a Core UML Transformation Language},
	Url = {http://ctp.di.fct.unl.pt/~ja/wituml02.htm},
	Year = 2002,
	Annote = {internationalworkshop}}

@phdthesis{Pollet2005phd,
	Author = {Pollet, Damien},
	Date-Modified = {2007-05-06 00:21:25 +0200},
	Local-Url = {file://localhost/Users/dpollet/Documents/Papers-BibDesk/2005/Pollet2005phd.pdf},
	Month = jun,
	School = {Université de Rennes~1},
	Shorttitle = {phd},
	Title = {Une architecture pour les transformations de modèles et la restructuration de modèles UML},
	Url = {http://people.untyped.org/damien.pollet/publications/2005/Pollet2005phd.pdf},
	Year = 2005,
	Abstract = {Model engineering attempts to solve how we can evolve complex software systems. Indeed, those systems must follow the evolution of new requirements and technologies, and this evolution is faster and faster compared to the business domain evolution. We thus propose to reuse the domain expertise independantly of any underlying technology, through model transformation techniques. 
The contribution presented in this document is an architecture for manipulating models which is independent of any specific metamodel. During development of model transformations, this architecture supports proven techniques of object-oriented software engineering. A reference implementation in functional programming specifies the semantics of the interface for accessing models. 
Our approach is based on a MOF-level interface (MOF: Meta-Object Facility) for model manipulation. The associated programming language supports direct manipulation of model elements, because the metamodel structure ynamically extends the set of types available to the model transformation program. From a methodological point of view, we show that model transformations capture the implementation expertise for a business domain to a given technology; it is therefore useful to model and develop complex transformations using sound software engineering and model engineering techniques. We illustrate this in practice using transformations for design pattern introduction and refactoring in UML models (UML: Unified Modeling Language). 
}}

@inproceedings{Sunye2001umlRefactoring,
	Address = {Toronto},
	Author = {Sunyé, Gerson and Pollet, Damien and Le~Traon, Yves and Jézéquel, Jean-Marc},
	Booktitle = {UML~2001 -- The Unified Modeling Language -- Modeling Languages, Concepts, and Tools},
	Date-Modified = {2007-05-06 00:21:56 +0200},
	Editor = {Gogolla, Martin and Kobryn, Cris},
	Isbn = {3-540-42667-1},
	Local-Url = {file://localhost/Users/dpollet/Documents/Papers-BibDesk/2001/Sunye2001umlRefactoring.pdf},
	Month = oct,
	Pages = {134-148},
	Publisher = SV,
	Series = LNCS,
	Shorttitle = {umlRefactoring},
	Title = {Refactoring UML Models},
	Url = {http://people.untyped.org/damien.pollet/publications/2001/Sunye2001umlRefactoring.pdf},
	Volume = 2185,
	Year = 2001,
	Abstract = {Software developers spend most of their time modifying and maintaining existing products. This is because systems, and consequently their design, are in perpetual evolution before they die. Nevertheless, dealing with this evolution is a complex task. Before evolving a system, structural modifications are often required. The goal of this kind of modification is to make certain elements more extensible, permitting the addition of new features. However, designers are seldom able to evaluate the impact, on the whole model, of a single modification. That is, they cannot precisely verify if a change modifies the behavior of the modeled system. A possible solution for this problem is to provide designers with a set of basic transformations, which can ensure behavior preservation. These transformations, also known as refactorings, can then be used, step by step, to improve the design of the system. In this paper we present a set of refactorings and explain how they can be designed so as to preserve the behavior of a UML model. Some of these refactorings are illustrated with examples.},
	Annote = {internationalconference}}
'